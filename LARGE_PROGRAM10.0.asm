;---------------------------------------------------------------------
.ORIG x3000
;MAIN LOOP
LD R5 INIT_SUB
JSRR R5

LD R0, PROMPT_USER 
PUTS

;SUBROUTINE 1 
LD R5 SUB1
JSRR R5 ;JUMPS TO SUBROUTINE USER INPUT LOOP

;AFTER SUB1 IS CALLED, IT WILL JUMP TO x3500 TO GET USER INPUT, AND IT TEST IF IT IS A VALID INPUT (NO LONGER THAN 4 CHARACTERS) IN USER_INPUT_LOOP. IF USER INPUT IS INVALID, IT WILL JUMP TO x4000 LABELED ERROR LOOP WHICH PRINTS OUT A MESSAGE TO CONSOLE, THEN IT RETURNS BACK TO USER_INPUT_LOOP UNTIL INPUT IS VALID, EXCEPT IT JUMPS TO x3501 SO IT DOESN'T OVERWRITE THE ADDRESS STORED IN RET_MAIN IN ORDER TO RETURN BACK TO THE MAIN LOOP TO GO TO NEXT SUBROUTINE.

;SUBROUTINE 2
LD R5 SUB2 
JSRR R5 ;JUMPS TO SUBROUTINE DECODING LOOP
    SUB1 .FILL x3500
    SUB2 .FILL x4500
    INIT_SUB .FILL x2FF6
	PROMPT_USER .FILL x51EC
.END
;---------------------------------------------------------------------
.ORIG x2FF6
AND R0 R0 #0
AND R1 R0 #0
AND R2 R0 #0
AND R3 R0 #0
AND R4 R0 #0
AND R6 R0 #0
RET
.END
;---------------------------------------------------------------------
.ORIG x3500
;USER INPUT LOOP
ST R7 RET_MAIN ;STORES R7 INTO RET_MAIN TO KEEP ORIGINAL RETURN FROM SUBROUTINE SO THAT IT DOESN'T GET OVERWRITTEN BY ANOTHER SUBROUTINE. 
LD R5 STRING_HEAD ; INITIALIZING STRING POINTER FOR NEW INSTRUCTION INPUT
ST R5 STRING_PTR 
LD R5 INIT_SUB1
JSRR R5
LD R2 DEL

GET_USER_INPUT
    GETC
    OUT 
    ADD R1 R1 #1 ;R1 CONTAINS THE INPUT_COUNTER
    RET_PT
    JSR STORE_USER_INPUT
    JSR TEST_INPUT
    BR GET_USER_INPUT    

TEST_INPUT ;TEST TO SEE IF USER HAS PRESSED ENTER
	ADD R5 R0 #-10
	BRZ ECHO_USER_INPUT

TEST_MAX_INPUT 
	ADD R5 R1 #-4
	BRZ MAX_INPUT
	RET

MAX_INPUT 
	GETC
        OUT
        ADD R1 R1 #1
	ADD R5 R0 #-10 
	BRZ RET_PT
	BRNP MAX_INPUT

STORE_USER_INPUT
    LD R5 STRING_PTR
    STI R0 STRING_PTR
    ADD R5 R5 #1
    ST R5 STRING_PTR
    RET 

ECHO_USER_INPUT
    STI R1 INPUT_COUNTER2
    STI R5 STRING_PTR
    ADD R5 R1 #-5
    BRP ERROR_CODE
    LD R7 RET_MAIN
    RET

ERROR_CODE
    LD R7 ERROR_SUB2 
    RET
	
    PROMPT_USER1 .FILL x51EC
    DEL .FILL #-92
    INIT_SUB1 .FILL x2FF6
    INPUT_COUNTER2 .FILL x36FF
    ERROR_SUB2 .FILL x4000
    RET_MAIN .FILL x0000
    STRING_PTR .FILL x3700
	STRING_HEAD .FILL x3700
.END
;---------------------------------------------------------------------
.ORIG x4000
ST R7 RET_MAIN1
LEA R0 ERROR_STRING 
PUTS
LD R5 GET_USER_INPUT1
JSRR R5
    ERROR_STRING .STRINGZ "\nInvalid instruction\nPlease enter a valid instruction: " 
    GET_USER_INPUT1 .FILL x3501
    RET_MAIN1 .FILL x0000
HALT
.END
;---------------------------------------------------------------------
.ORIG x4500
;DECODING LOOP
LDI R1 FIRST_LETTER
LDI R2 SECOND_LETTER
LDI R3 THIRD_LETTER
LDI R4 FOURTH_LETTER
BR Q_TEST

    FIRST_LETTER .FILL x3700
    SECOND_LETTER .FILL x3701
    THIRD_LETTER .FILL x3702
    FOURTH_LETTER .FILL x3703

;TESTING FOR Q***
Q_TEST
   LD R6 LWRCSE_Q ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE Q
	ADD R5 R1 R6
	BRZ Q_TRUE
   LD R6 UPRCSE_Q ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE Q
	ADD R5 R1 R6
	BRZ Q_TRUE
	BRNP A_TEST
		LWRCSE_Q .FILL #-113
		UPRCSE_Q .FILL #-81

;TESTING FOR QU**
Q_TRUE
    LDI R5 INPUT_COUNTER 
ADD R5 R5 #-5
    BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_U ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE U
	ADD R5 R2 R6
	BRZ QU_TRUE
	LD R6 UPRCSE_U ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE U
	ADD R5 R2 R6
	BRZ QU_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_U .FILL #-117
		UPRCSE_U .FILL #-85

;TESTING FOR QUI*
QU_TRUE
	LD R6 LWRCSE_I ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE I
	ADD R5 R3 R6
	BRZ QUI_TRUE
	LD R6 UPRCSE_I ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE I
	ADD R5 R3 R6
	BRZ QUI_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_I .FILL #-105
		UPRCSE_I .FILL #-73

;TESING FOR QUIT
QUI_TRUE
	LD R6 LWRCSE_T ;TEST TO SEE IF THE FOURTH LETTER IS LOWERCASE T
	ADD R5 R4 R6
	BRZ QUIT_TRUE
	LD R6 UPRCSE_T ;TEST TO SEE IF THE FOURTH LETTER IS UPPERCASE T
	ADD R5 R4 R6
	BRZ QUIT_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_T .FILL #-116
		UPRCSE_T .FILL #-84

QUIT_TRUE
	HALT

;TESTING FOR A**
A_TEST
	LD R6 LWRCSE_A ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE A
	ADD R5 R1 R6
	BRZ A_TRUE
	LD R6 UPRCSE_A ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE A
	ADD R5 R1 R6
	BRZ A_TRUE
	BRNP B_TEST
		LWRCSE_A .FILL #-97
		UPRCSE_A .FILL #-65

;TESTING FOR AD*
A_TRUE 
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_D ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE D
	ADD R5 R2 R6
	BRZ AD_TRUE
	LD R6 UPRCSE_D ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE D
	ADD R5 R2 R6
	BRZ AD_TRUE
	BRNP AN_TEST
		LWRCSE_D .FILL #-100
		UPRCSE_D .FILL #-68

;TESTING FOR ADD
AD_TRUE
	LD R6 LWRCSE_D ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE D
	ADD R5 R3 R6
	BRZ ADD_TRUE
	LD R6 UPRCSE_D ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE D
	ADD R5 R3 R6
	BRZ ADD_TRUE
	LD R5 ERROR_SUB
	JSRR R5

ADD_TRUE
	LD R0 ADD1
	PUTS
	LD R5 PROGRAM_START
	JSRR R5
		ADD1 .FILL x5000

;TESTING FOR AN*
AN_TEST
	LD R6 LWRCSE_N ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE N
	ADD R5 R2 R6
	BRZ AN_TRUE
	LD R6 UPRCSE_N ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE N
	ADD R5 R2 R6
	BRZ AN_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_N .FILL #-110
		UPRCSE_N .FILL #-78

;TESTING FOR AND
AN_TRUE
	LD R6 LWRCSE_D ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE D
	ADD R5 R3 R6
	BRZ AND_TRUE
	LD R6 UPRCSE_D ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE D
	ADD R5 R3 R6
	BRZ AND_TRUE
	LD R5 ERROR_SUB
	JSRR R5

AND_TRUE
	LD R0 AND1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		AND1 .FILL x501D
		PROGRAM_START .FILL x3002
		ERROR_SUB .FILL x4000
		INPUT_COUNTER .FILL x36FF ;THIS IS PUT HERE TO VALIDATE OFFSET BOUNDS

;TESTING FOR B*
B_TEST 
	LD R6 LWRCSE_B ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE B
	ADD R5 R1 R6
	BRZ B_TRUE
	LD R6 UPRCSE_B ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE B
	ADD R5 R1 R6
	BRZ B_TRUE
	BRNP J_TEST
		LWRCSE_B .FILL #-98
		UPRCSE_B .FILL #-66

;TESTING FOR BR
B_TRUE
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-3
	BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_R ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE R
	ADD R5 R2 R6
	BRZ BR_TRUE
	LD R6 UPRCSE_R ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE R
	ADD R5 R2 R6
	BRZ BR_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_R .FILL #-114
		UPRCSE_R .FILL #-82

BR_TRUE
	LD R0 BR1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		BR1 .FILL x503A

;TESTING FOR J***
J_TEST
	LD R6 LWRCSE_J ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE J
	ADD R5 R1 R6
	BRZ J_TRUE
	LD R6 UPRCSE_J ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE J
	ADD R5 R1 R6
	BRZ J_TRUE
	BRNP L_TEST
		LWRCSE_J .FILL #-106
		UPRCSE_J .FILL #-74

;TESTING FOR JM*
J_TRUE
	LD R6 LWRCSE_M;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE M
	ADD R5 R2 R6
	BRZ JM_TRUE
	LD R6 UPRCSE_M ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE M
	ADD R5 R2 R6
	BRZ JM_TRUE
	BRNP JS_TEST
		LWRCSE_M .FILL #-109
		UPRCSE_M .FILL #-77

;TESTING FOR JMP
JM_TRUE
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_P ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE P
	ADD R5 R3 R6
	BRZ JMP_TRUE
	LD R6 UPRCSE_P ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE P
	ADD R5 R3 R6
	BRZ JMP_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_P .FILL #-112
		UPRCSE_P .FILL #-80

JMP_TRUE
	LD R0 JMP1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		JMP1 .FILL x5056

;TESTING FOR JS**
JS_TEST
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRZP #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_S;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE S
	ADD R5 R2 R6
	BRZ JS_TRUE
	LD R6 UPRCSE_S ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE S
	ADD R5 R2 R6
	BRZ JS_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_S .FILL #-115
		UPRCSE_S .FILL #-83

;TESTING FOR JSR*
JS_TRUE
	LD R6 LWRCSE_R ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE R
	ADD R5 R3 R6
	BRZ JSRR_PRETEST
	LD R6 UPRCSE_R ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE R
	ADD R5 R3 R6
	BRZ JSRR_PRETEST
	LD R5 ERROR_SUB
	JSRR R5

;TESTING FOR JSR*
JSRR_PRETEST
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-5
	BRZ JSRR_TEST
	BR JSR_TRUE

JSR_TRUE ;SAME AS JSRR_TRUE
	LD R0 JSR1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		JSR1 .FILL x5073

;TESTING FOR JSRR
JSRR_TEST
	LD R6 LWRCSE_R ;TEST TO SEE IF THE FOURTH LETTER IS LOWERCASE R
	ADD R5 R4 R6
	BRZ JSRR_TRUE
	LD R6 UPRCSE_R ;TEST TO SEE IF THE FOURTH LETTER IS UPPERCASE R
	ADD R5 R4 R6
	BRZ JSRR_TRUE
	LD R5 ERROR_SUB
	JSRR R5
	
			
JSRR_TRUE ;SAME AS JSRR_TRUE
	LD R0 JSRR1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		JSRR1 .FILL x5090

;TESTING FOR L**
L_TEST
	LD R6 LWRCSE_L ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE L
	ADD R5 R1 R6
	BRZ LE_TEST
	LD R6 UPRCSE_L ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE L
	ADD R5 R1 R6
	BRZ LE_TEST
	BRNP N_TEST
		LWRCSE_L .FILL #-108
		UPRCSE_L .FILL #-76

;TESTING FOR LE*
LE_TEST
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRNZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_E;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE E
	ADD R5 R2 R6
	BRZ LE_TRUE
	LD R6 UPRCSE_E ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE E
	ADD R5 R2 R6
	BRZ LE_TRUE
	BR LD_TEST
		LWRCSE_E .FILL #-101
		UPRCSE_E .FILL #-69


;TESTING FOR LD*
LD_TEST
	LD R6 LWRCSE_D ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE D
	ADD R5 R2 R6
	BRZ LD_TRUE
	LD R6 UPRCSE_D ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE D
	ADD R5 R2 R6
	BRZ LD_TRUE
	LD R5 ERROR_SUB
	JSRR R5
   
;TESTING FOR LD AND LDI
LD_TRUE
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-3
	BRZ #3
	BRP LDI_TEST
	LD R5 ERROR_SUB
	JSRR R5
	LD R0 LD1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		LD1 .FILL x50AE

LDI_TEST
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE I
	ADD R5 R3 R6
	BRZ LDI_TRUE
	LD R6 UPRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE I
	ADD R5 R3 R6
	BRZ LDI_TRUE
	BR LDR_TEST
		LWRCSE_I1 .FILL #-105
		UPRCSE_I1 .FILL #-73

LDI_TRUE
	LD R0 LDI1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		LDI1 .FILL x50CA

LDR_TEST
	LD R6 LWRCSE_R ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE R
	ADD R5 R3 R6
	BRZ LDR_TRUE
	LD R6 UPRCSE_R ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE R
	ADD R5 R3 R6
	BRZ LDR_TRUE
	LD R5 ERROR_SUB
	JSRR R5

LDR_TRUE
	LD R0 LDR1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		LDR1 .FILL x50E7

;TESTING FOR LEA
LE_TRUE
	LD R6 LWRCSE_A1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE A
	ADD R5 R3 R6
	BRZ LEA_TRUE
	LD R6 UPRCSE_A1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE A
	ADD R5 R3 R6
	BRZ LEA_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_A1 .FILL #-97
		UPRCSE_A1 .FILL #-65

LEA_TRUE
	LD R0 LEA1
	PUTS 
	LD R5 PROGRAM_START
	JSRR R5
		LEA1 .FILL x5104

;TESTING FOR N**
N_TEST
	LD R6 LWRCSE_N ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE N
	ADD R5 R1 R6
	BRZ N_TRUE
	LD R6 UPRCSE_N ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE N
	ADD R5 R1 R6
	BRZ N_TRUE
	BR R_TEST

;TESTING FOR NO*
N_TRUE
	LDI R5 INPUT_COUNTER 
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB
	JSRR R5
	LD R6 LWRCSE_O ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE O
	ADD R5 R2 R6
	BRZ NO_TRUE
	LD R6 UPRCSE_O ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE O
	ADD R5 R2 R6
	BRZ NO_TRUE
	LD R5 ERROR_SUB
	JSRR R5
		LWRCSE_O .FILL #-111
		UPRCSE_O .FILL #-79

;TESTING FOR NOT
NO_TRUE
	LD R6 LWRCSE_T1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE T
	ADD R5 R3 R6
	BRZ NOT_TRUE
	LD R6 UPRCSE_T1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE T
	ADD R5 R3 R6
	BRZ NOT_TRUE
	LD R5 ERROR_SUB1
	JSRR R5
		LWRCSE_T1 .FILL #-116
		UPRCSE_T1 .FILL #-84

NOT_TRUE
	LD R0 NOT1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		NOT1 .FILL x5121
		PROGRAM_START1 .FILL x3002
		ERROR_SUB1 .FILL x4000
		INPUT_COUNTER1 .FILL x36FF

;TESTING FOR R**
R_TEST
	LD R6 LWRCSE_R ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE R
	ADD R5 R1 R6
	BRZ RE_TEST
	LD R6 UPRCSE_R ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE R
	ADD R5 R1 R6
	BRZ RE_TEST
	BRNP S_TEST

;TESTING FOR RE*
RE_TEST
	LDI R5 INPUT_COUNTER1 
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB1
	JSRR R5
	LD R6 LWRCSE_E ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE E
	ADD R5 R2 R6
	BRZ RET_TEST
	LD R6 UPRCSE_E ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE E
	ADD R5 R2 R6
	BRZ RET_TEST
	BR RT_TEST

;TESTING FOR RET
RET_TEST
	LD R6 LWRCSE_T1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE T
	ADD R5 R3 R6
	BRZ RET_TRUE
	LD R6 UPRCSE_T1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE T
	ADD R5 R3 R6
	BRZ RET_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

RET_TRUE
	LD R0 RET1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		RET1 .FILL x513E

;TESTING FOR RT*
RT_TEST
	LD R6 LWRCSE_T1 ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE T
	ADD R5 R2 R6
	BRZ RTI_TEST
	LD R6 UPRCSE_T1 ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE T
	ADD R5 R2 R6
	BRZ RTI_TEST
	LD R5 ERROR_SUB1
	JSRR R5

;TESTING FOR RTI
RTI_TEST
	LD R6 LWRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE I
	ADD R5 R3 R6
	BRZ RTI_TRUE
	LD R6 UPRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE I
	ADD R5 R3 R6
	BRZ RTI_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

RTI_TRUE
	LD R0 RTI1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		RTI1 .FILL x515B

S_TEST
	LD R6 LWRCSE_S ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE S
	ADD R5 R1 R6
	BRZ S_TRUE
	LD R6 UPRCSE_S ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE S
	ADD R5 R1 R6
	BRZ S_TRUE
	BR T_TEST

S_TRUE
	LD R6 LWRCSE_T1 ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE T
	ADD R5 R2 R6
	BRZ ST_TRUE
	LD R6 UPRCSE_T1 ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE T
	ADD R5 R2 R6
	BRZ ST_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

ST_TRUE
	LDI R5 INPUT_COUNTER1
	ADD R5 R5 #-3
	BRZ #3
	BRP STI_TEST
	LD R5 ERROR_SUB1
	JSRR R5
	LD R0 ST1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		ST1 .FILL x5178

;TESTING FOR STI
STI_TEST
	LDI R5 INPUT_COUNTER1
	ADD R5 R5 #-4
	BRZ #2
	LD R5 ERROR_SUB1
	JSRR R5
	LD R6 LWRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE I
	ADD R5 R3 R6
	BRZ STI_TRUE
	LD R6 UPRCSE_I1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE I
	ADD R5 R3 R6
	BRZ STI_TRUE
	BR STR_TEST

STI_TRUE
	LD R0 STI1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		STI1 .FILL x5194

;TESTING FOR STR
STR_TEST
	LD R6 LWRCSE_R1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE R
	ADD R5 R3 R6
	BRZ STR_TRUE
	LD R6 UPRCSE_R1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE R
	ADD R5 R3 R6
	BRZ STR_TRUE
	LD R5 ERROR_SUB1
	JSRR R5
		LWRCSE_R1 .FILL #-114
		UPRCSE_R1 .FILL #-82

STR_TRUE
	LD R0 STR1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		STR1 .FILL x51B1

T_TEST
	LDI R5 INPUT_COUNTER1 
	ADD R5 R5 #-5
	BRZ #2
	LD R5 ERROR_SUB1
	JSRR R5
	LD R6 LWRCSE_T1 ;TEST TO SEE IF THE FIRST LETTER IS LOWERCASE T
	ADD R5 R1 R6
	BRZ T_TRUE
	LD R6 UPRCSE_T1 ;TEST TO SEE IF THE FIRST LETTER IS UPPERCASE T
	ADD R5 R1 R6
	BRZ T_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

T_TRUE
	LD R6 LWRCSE_R1 ;TEST TO SEE IF THE SECOND LETTER IS LOWERCASE R
	ADD R5 R2 R6
	BRZ TR_TRUE
	LD R6 UPRCSE_R1 ;TEST TO SEE IF THE SECOND LETTER IS UPPERCASE R
	ADD R5 R2 R6
	BRZ TR_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

TR_TRUE
	LD R6 LWRCSE_A1 ;TEST TO SEE IF THE THIRD LETTER IS LOWERCASE A
	ADD R5 R3 R6
	BRZ TRA_TRUE
	LD R6 UPRCSE_A1 ;TEST TO SEE IF THE THIRD LETTER IS UPPERCASE A
	ADD R5 R3 R6
	BRZ TRA_TRUE
	LD R5 ERROR_SUB1
	JSRR R5

TRA_TRUE
	LD R6 LWRCSE_P1 ;TEST TO SEE IF THE FOURTH LETTER IS LOWERCASE P
	ADD R5 R4 R6
	BRZ TRAP_TRUE
	LD R6 UPRCSE_P1 ;TEST TO SEE IF THE FOURTH LETTER IS UPPERCASE P
	ADD R5 R4 R6
	BRZ TRAP_TRUE
	LD R5 ERROR_SUB1
	JSRR R5
		LWRCSE_P1 .FILL #-112
		UPRCSE_P1 .FILL #-80

TRAP_TRUE
	LD R0 TRAP1
	PUTS 
	LD R5 PROGRAM_START1
	JSRR R5
		TRAP1 .FILL x51CE

.END
;---------------------------------------------------------------------
.ORIG x5000
;STORAGE CONTAINING LARGER DATA

ADD2 .STRINGZ "The opcode for 'ADD' is 0001" ;x5000
AND2 .STRINGZ "The opcode for 'AND' is 0101" ;x501D
BR2 .STRINGZ "The opcode for 'BR' is 0000" ;x503A
JMP2 .STRINGZ "The opcode for 'JMP' is 1100" ;x5056
JSR2 .STRINGZ "The opcode for 'JSR' is 0100" ;x5073
JSRR2 .STRINGZ "The opcode for 'JSRR' is 0100" ;x5090
LD2 .STRINGZ "The opcode for 'LD' is 0010" ;x50AE
LDI2 .STRINGZ "The opcode for 'LDI' is 1010" ;x50CA
LDR2 .STRINGZ "The opcode for 'LDR' is 0110" ;x50E7
LEA2 .STRINGZ "The opcode for 'LEA' is 1110" ;x5104
NOT2 .STRINGZ "The opcode for 'NOT' is 1001" ;x5121
RET2 .STRINGZ "The opcode for 'RET' is 1100" ;x513E
RTI2 .STRINGZ "The opcode for 'RTI' is 1000" ;x515B
ST2 .STRINGZ "The opcode for 'ST' is 0011" ;x5178
STI2 .STRINGZ "The opcode for 'STI' is 1011" ;x5194
STR2 .STRINGZ "The opcode for 'STR' is 0111" ;x51B1
TRAP2 .STRINGZ "The opcode for 'TRAP' is 1111" ;x51CE
PROMPT_USER2 .STRINGZ "\nPlease enter an instruction: " ;x51EC
.END
